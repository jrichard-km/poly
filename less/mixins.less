// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

.e(@element) {
  &__@{@element} {
    @content;
  }
}
.m(@modifier) {
  &--@{@modifier} {
    @content;
  }
}

// Media queries

.mq(@break) {
  @if @break == "small" {
    // @media (min-width: @brkpoint--sm) and (max-width: @brkpoint--md) {
    .breakpoint(@brkpoint--sm @brkpoint--md) {
      @content;
    }
  }
  @else if @break == "medium" {
    // @media (min-width: @brkpoint--md + 1) {
    .breakpoint(@brkpoint--md + 1) {
      @content;
    }
  }
  @else if @break == "large" {
    // @media (min-width: @brkpoint--lg) {
    .breakpoint(@brkpoint--lg) {
      @content;
    }
  }
  @else {
    @error "No value could be retrieved for `@{@break}`. "
  }
}

// Generate modifier color classes

.ui-colors(@map, @p-el:null) {
  @each @theme, @color in @map {
    .m(@theme) {
      background-color: @color;

      // If an @p-el value is passed, generate pseudo-element bg colors. Used on progbars.
      @if @p-el {
        &:after {
          background-color: lighten(@color, 8%);
        } 
      }
    }
  }
}

// Generating :before or :after pseudo-element shapes

.p-el(
  @el,
  @el-w: null,
  @el-h: null) {
    @if @el == "before" or @el == "after" {
      &:@{@el} {
       @extend %pseudos;
       width: @el-w;
       height: @el-h;
       @content;
     }
   } 
   @else {
     @error "`@{@el}` is not a valid pseudo-element.";
   }
}

// Image replacement

.img-replace(@img, @w, @h, @disp: block) {
	background-image: url('@{@path--rel}/@{@img}');
	background-repeat: no-repeat;
	width: @w;
	height: @h;
	display: @disp;
}

// Grid columns

.g-columns {
    @for @i from 1 through @g-col-count {
      @context: g-context(@g-col-width, @g-col-count ,@g-gutter-width) !global;
      @target: (@g-col-width * @i) + (@g-gutter-width * (@i - 1));

      // Generate and output the column modifier classes 
      &--@{@i} {
        .span(@i of @g-col-count);
        padding: gutter(0);
        &:first-child {
            .first;
        }

        &:last-child {
            .last;
        }
        &.centered {
            margin: 0 auto;
            float: none;
        }
      }
    }
}

